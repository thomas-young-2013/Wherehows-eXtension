apply plugin: 'scala'

def findPlayHome(){
    project.ext.playHome = System.getenv()['ACTIVATOR_HOME']
    if (null == project.ext.playHome) {
        throw new GradleException('ACTIVATOR_HOME env variable not set!')
    }
    project.ext.playExec = "${playHome}/bin/activator"
}

findPlayHome()

configurations{
    //Configuration containing sbt generated .class files
    //This is needed for IDEs, because they cannot compile
    //play templates by themselves.
    playManaged

    //Libraries needed at compilation time but not to be
    //exported as part of the distribution
    provided

}

dependencies{

    // User defined libraries (will be copied to lib/ before `play compile`)
    compile externalDependency.play
    compile externalDependency.play_java_jdbc
    compile externalDependency.play_java_ws
    compile externalDependency.play_cache
    compile externalDependency.play_filter
    compile externalDependency.spring_jdbc
    compile externalDependency.mockito

    provided project(":wherehows-common")

    // playManaged files('target/scala-2.9.1/classes_managed')
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

clean {
    delete "lib/"
}

task copyPlayLibs(type: Copy){
    from configurations.provided
    into 'lib'
}

task "playCompile" (type: Exec, dependsOn: copyPlayLibs) {
    commandLine playExec, 'compile'
}

task "playClean" (type: Exec) {
    commandLine playExec, 'clean'
}

sourceSets.main{
    java.srcDir 'app'
    compileClasspath += configurations.provided
}

// optional: if using 'idea' plugin
idea {
    module{
        scopes.COMPILE.plus += [configurations.playManaged]
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

// delegate gradle java task to play command

task "build" (type: Exec, dependsOn: playClean, overwrite: true) {
    commandLine playExec, 'stage'
}

task "assemble" (type: Exec, dependsOn: playClean, overwrite: true) {
    commandLine playExec, 'stage'
}

task "dist" (type: Exec, overwrite: true) {
    commandLine playExec, 'dist'
}

task "check" (overwrite: true) {
  // skip gradle check of this repository
}
